(defun demo()
  (setq fsa '((start (0)) (accept (1 3))
    (transitions ((0 0 X) (0 1 Y) (1 2 X) (2 2 X) (2 3 Y) (3 3 X) (3 4 Z) (4 4 X) (4 1 A)))))
  (setq state (car (assoc 'start fsa)))
  (readFile)
  (princ "Processing the string ")
  (print theString)
  (testInput theString (assoc 'transitions fsa))
)

(defun testInput(theString l)
  	(setq state (getNextState state (car theString) l))
	(if (eq state NIL) (princ "reject")
	 (if (eq (cdr theString) NIL) (if (eq (isAccept state (assoc 'accept fsa)) T) (princ "accept") (princ "reject")) (testInput (cdr theString) l)))
)

(defun getNextState(state X L)
    (COND ((NULL L) (princ "invalid char ") (princ X) (princ " in state ") (print state) NIL)
        ((ATOM L)	 NIL)
        ((and  (EQUAL X (CADDAR L)) (EQUAL state (CAAR L)) (CADAR L)))
        (T  (getNextState state X (CDR L)))
    )
)

(defun isAccept (state l)
    (COND ((NULL l)	 NIL)
        ((ATOM l)	 NIL)
        ((EQUAL state (CAR l)) T)
        (T  (isAccept state (CDR l)))
    )
)

(defun assoc (p l)
    (COND ((null l)	 nil)
        ((atom l)	 nil)
        ((equal p (caar l)) (cadar l))
        (t (assoc p (cdr l)))
    )
)

(defun readFile()
	(setq fp (open "theString.txt" :direction :input)) ; read the file
	(setq theString (read fp "done"))
	(close fp)
)
